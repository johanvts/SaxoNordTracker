* Portfolio tracking across Saxo bank and Nordnet accounts

Accepts transaction logs from [[https://www.saxoinvestor.com/][Saxo Investor]] (xlsx) and [[http://www.nordnet.dk][Nordnet]] (csv).
Merges these into a joined format.
Visualises the portfolio development using [[https://plotly.com/][Plotly]].

#+caption: sampel portfolit
[[file:portfolio.PNG]]

- ~Value~ represents the value of all tickers and cash holdings.
- ~Transfer~ represents the cash deposits and withdrawals.
- ~Cash~ reprensets the cash holdings.

The other summations are just examples. Customize or delete them as needed, see below.

** Using

- Install [[https://learn.microsoft.com/en-us/dotnet/core/install/][dotnet]].
- Clone the repo.
- Download your own transaction logs and alter ~Program.fs~ to point to your own files. Or continue with an example portfolio (see the ~Data~ folder).
  - From Saxo investor you want the full `Transactions` export. Not any of the sub-catogories (Trades, Corporate Actions, etc.). Use the Excel format.
  - If something does not work check the ~Template~ folder. Your files should match the format of these.
- Issue ~> dotnet run~ (Note that running the program requests ticker info from [[http://yahoo.com][Yahoo]] and may take some time depending on the number of tickers).
- Open ~portfolio.html~.
  
** Custom summation

The ~SymbolGroups~ object in ~Program.fs~ determines how symbols are aggregated. Just below is the section that controls what is included in the plot.
In the example the ~Global~ group contains two symbols ("DKIGI.CO" and "TSLA") and the ~Stocks~ group shows the value of all tickers, but is not currently plotted.
The special symbols ~Cash~ and ~Transfer~ represent the cash in the account and the cash transfers. All other symbols are [[yahoo.com][Yahoo]] ticker symbols.

** How it works
First the transactions logs are read. All unique instruments are identified and we query Yahoo to try and get a ticker symbol.
For the identified ticker symbols the currency and price history is collected from Yahoo as well.
Finally the transactions and price information is aggregated to provid a timeline for each ticker.
Theses timelines can then be further aggregated via. the ~symbolGroups~ object. The resulting final aggregations are then plotted.
